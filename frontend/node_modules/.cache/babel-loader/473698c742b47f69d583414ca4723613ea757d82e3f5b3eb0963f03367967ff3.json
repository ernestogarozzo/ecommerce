{"ast":null,"code":"var _jsxFileName = \"D:\\\\FUN\\\\Full-Stack\\\\ecommerce\\\\frontend\\\\src\\\\components\\\\SecTradingSession.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Button, Form, Dropdown, DropdownButton, ButtonGroup } from 'react-bootstrap';\nimport { tradingBot, tradingBotChart, tradingWalletInfo, tradingBotStart } from '../actions/tradingBotActions';\nimport ChartComponent from './ChartIndex';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SecTradingSession() {\n  _s();\n  // Save bot params\n  const initDropdowns = {\n    \"market\": {\n      \"label\": \"Market\",\n      \"values\": [\"BTCUSDT\", \"BTCBUSD\", \"ETHUSDT\", \"SOLUSDT\"],\n      \"assetValues\": [\"BTC\", \"BTC\", \"ETH\", \"SOL\"],\n      \"stableValues\": [\"USDT\", \"BUSD\", \"USDT\", \"USDT\"],\n      \"selected\": \"\"\n    },\n    \"timeframe\": {\n      \"label\": \"Timeframe\",\n      \"values\": [\"1m\", \"5m\", \"30m\", \"1h\", \"4h\", \"12h\", \"1d\", \"1w\"],\n      \"selected\": \"\"\n    }\n  };\n  const initParams = {\n    \"rsiBuy\": {\n      \"value\": 30,\n      \"min\": 1,\n      \"max\": 100\n    },\n    \"rsiSell\": {\n      \"value\": 70,\n      \"min\": 1,\n      \"max\": 100\n    },\n    \"capitalToSell\": {\n      \"value\": 0.99,\n      \"min\": 0.001,\n      \"max\": 1\n    },\n    \"minimumGain\": {\n      \"value\": 1.01,\n      \"min\": 1,\n      \"max\": 2\n    },\n    \"movingAvgFast\": {\n      \"value\": 15,\n      \"min\": 5,\n      \"max\": 100\n    },\n    \"movingAvgSlow\": {\n      \"value\": 240,\n      \"min\": 100,\n      \"max\": 500\n    }\n  };\n  const [botDropdown, setBotDropdown] = useState(initDropdowns);\n  const [botParams, setBotParams] = useState(initParams);\n  const dispatch = useDispatch();\n\n  // Get trading chart data\n  const [submitParams, setSubmitParams] = useState(false);\n  const tradingStart = useSelector(state => state.tradingStart);\n  const {\n    loadingStart,\n    response\n  } = tradingStart;\n  const tradingBotData = useSelector(state => state.tradingBotData);\n  const {\n    loading,\n    chartData,\n    tradingData\n  } = tradingBotData;\n\n  // const state = useSelector(state => state);\n\n  const [timestamp, setTimestamp] = useState(Date.now());\n\n  //sleep function to trigger query \n  const sleep = ms => new Promise(r => setTimeout(r, ms));\n\n  /*** Send params to backend ***/\n  const handleSubmitParams = async () => {\n    const N = 1000;\n    const idParams = 0;\n    //set default values\n    const asset = botDropdown[\"market\"].selected == '' ? \"BTC\" : botDropdown[\"market\"].assetValues[botDropdown[\"market\"].values.indexOf(botDropdown[\"market\"].selected)];\n    const stable = botDropdown[\"market\"].selected == '' ? \"USDT\" : botDropdown[\"market\"].stableValues[botDropdown[\"market\"].values.indexOf(botDropdown[\"market\"].selected)];\n    const timeframe = botDropdown[\"timeframe\"].selected == '' ? \"1m\" : botDropdown[\"timeframe\"].selected;\n    var params = {\n      \"asset\": asset,\n      \"stable\": stable,\n      \"timeframe\": timeframe,\n      \"rsiBuy\": botParams[\"rsiBuy\"].value,\n      \"rsiSell\": botParams[\"rsiSell\"].value,\n      \"percToSell\": botParams[\"capitalToSell\"].value,\n      \"marginSell\": botParams[\"minimumGain\"].value,\n      \"moveAvgFast\": botParams[\"movingAvgFast\"].value,\n      \"moveAvgSlow\": botParams[\"movingAvgSlow\"].value,\n      \"timestamp\": timestamp\n    };\n    console.log(params);\n    dispatch(tradingBotStart(params));\n    for (let i = 0; i < N; i++) {\n      await sleep(10000);\n      dispatch(tradingchartData(timestamp));\n      if (chartData.lenght > 1 && !submitParams) {\n        setSubmitParams(true);\n        idParams = tradingBotData.params._id;\n        console.log(idParams);\n      }\n      if (submitParams) {\n        dispatch(tradingBot(idParams));\n      }\n    }\n  };\n\n  // Dropdown \n  const inputDropdown = initLabel => {\n    var dropdown = botDropdown[initLabel];\n    var label = dropdown[\"selected\"] == '' ? dropdown[\"label\"] : dropdown[\"label\"] + \": \" + dropdown[\"selected\"];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid gap-2\",\n      children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n        as: ButtonGroup,\n        id: `dropdown`,\n        variant: \"primary\",\n        title: label,\n        children: dropdown[\"values\"].map((value, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          eventKey: index,\n          onClick: () => setBotDropdown({\n            ...botDropdown,\n            [initLabel]: {\n              ...dropdown,\n              selected: value\n            }\n          }),\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  };\n  /*** VALIDATION ***/\n  // onChange: red text for invalid values\n  const handleOnChangeBotParams = target => {\n    const targetId = target.id;\n    const targetMax = botParams[targetId].max;\n    const targetMin = botParams[targetId].min;\n    const inputValue = target.value;\n    var newValue;\n    switch (true) {\n      case inputValue === '':\n        newValue = '';\n        target.style.color = \"\";\n        break;\n      case inputValue > targetMax:\n        newValue = parseFloat(inputValue);\n        target.style.color = \"red\";\n        break;\n      case inputValue < targetMin:\n        newValue = parseFloat(inputValue);\n        target.style.color = \"red\";\n        break;\n      default:\n        newValue = parseFloat(inputValue);\n        target.style.color = \"\";\n        break;\n    }\n    setBotParams({\n      ...botParams,\n      [targetId]: {\n        ...botParams[targetId],\n        value: newValue\n      }\n    });\n  };\n  // onBlur: black text, min and max for invalid values\n  const handleOnBlurBotParams = target => {\n    const targetId = target.id;\n    const targetMax = botParams[targetId].max;\n    const targetMin = botParams[targetId].min;\n    const inputValue = target.value;\n    var newValue;\n    switch (true) {\n      case inputValue == '' || inputValue < targetMin:\n        newValue = parseFloat(targetMin);\n        break;\n      case inputValue > targetMax:\n        newValue = parseFloat(targetMax);\n        break;\n      default:\n        newValue = parseFloat(inputValue);\n        break;\n    }\n    setBotParams({\n      ...botParams,\n      [targetId]: {\n        ...botParams[targetId],\n        value: newValue\n      }\n    });\n    target.style.color = \"\";\n  };\n  /*** SECTIONS ***/\n  // BotParams \n  const secBotParams = () => {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-white\",\n        children: \"Bot Parameters Setting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: inputDropdown(\"market\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: inputDropdown(\"timeframe\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"RSI buy signal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"rsiBuy\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.rsiBuy.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"RSI sell signal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"rsiSell\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.rsiSell.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Capital to sell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"capitalToSell\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.capitalToSell.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Minimun gain\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"minimumGain\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.minimumGain.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Moving Avg fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"movingAvgFast\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.movingAvgFast.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: 2,\n            md: 2,\n            sm: 6,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Moving Avg slow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              id: \"movingAvgSlow\",\n              className: \"rounded\",\n              as: \"input\",\n              type: \"number\",\n              value: botParams.movingAvgSlow.value,\n              onChange: e => handleOnChangeBotParams(e.target),\n              onBlur: e => handleOnBlurBotParams(e.target)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"p-2\",\n            lg: {\n              span: 6,\n              offset: 3\n            },\n            md: {\n              span: 6,\n              offset: 3\n            },\n            sm: 12,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid gap-2\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"float-end rounded\",\n                onClick: handleSubmitParams,\n                children: \"submit params\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  };\n  // Chart \n  const secChartDisplay = () => {\n    return submitParams ? loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(ChartComponent, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-2\",\n      children: secBotParams()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-2\",\n      children: secChartDisplay()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 6\n  }, this);\n}\n_s(SecTradingSession, \"0ypjH/4D6PX3niJzISkGwV9Iqw8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = SecTradingSession;\nexport default SecTradingSession;\nvar _c;\n$RefreshReg$(_c, \"SecTradingSession\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","Row","Col","Button","Form","Dropdown","DropdownButton","ButtonGroup","tradingBot","tradingBotChart","tradingWalletInfo","tradingBotStart","ChartComponent","Loader","jsxDEV","_jsxDEV","SecTradingSession","_s","initDropdowns","initParams","botDropdown","setBotDropdown","botParams","setBotParams","dispatch","submitParams","setSubmitParams","tradingStart","state","loadingStart","response","tradingBotData","loading","chartData","tradingData","timestamp","setTimestamp","Date","now","sleep","ms","Promise","r","setTimeout","handleSubmitParams","N","idParams","asset","selected","assetValues","values","indexOf","stable","stableValues","timeframe","params","value","console","log","i","tradingchartData","lenght","_id","inputDropdown","initLabel","dropdown","label","className","children","as","id","variant","title","map","index","Item","eventKey","onClick","fileName","_jsxFileName","lineNumber","columnNumber","handleOnChangeBotParams","target","targetId","targetMax","max","targetMin","min","inputValue","newValue","style","color","parseFloat","handleOnBlurBotParams","secBotParams","Group","lg","md","sm","xs","Label","Control","type","rsiBuy","onChange","e","onBlur","rsiSell","capitalToSell","minimumGain","movingAvgFast","movingAvgSlow","span","offset","secChartDisplay","data","_c","$RefreshReg$"],"sources":["D:/FUN/Full-Stack/ecommerce/frontend/src/components/SecTradingSession.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, Button, Form, Dropdown, DropdownButton, ButtonGroup } from 'react-bootstrap'\r\nimport { tradingBot, tradingBotChart, tradingWalletInfo, tradingBotStart } from '../actions/tradingBotActions';\r\nimport ChartComponent from './ChartIndex';\r\nimport Loader from './Loader'\r\n\r\nfunction SecTradingSession() {\r\n\r\n  // Save bot params\r\n  const initDropdowns = {\r\n    \"market\": {\r\n      \"label\": \"Market\",\r\n      \"values\": [\"BTCUSDT\", \"BTCBUSD\", \"ETHUSDT\", \"SOLUSDT\"],\r\n      \"assetValues\": [\"BTC\", \"BTC\", \"ETH\", \"SOL\"],\r\n      \"stableValues\": [\"USDT\", \"BUSD\", \"USDT\", \"USDT\"],\r\n      \"selected\": \"\"\r\n    },\r\n    \"timeframe\": {\r\n      \"label\": \"Timeframe\",\r\n      \"values\": [\"1m\", \"5m\", \"30m\", \"1h\", \"4h\", \"12h\", \"1d\", \"1w\"],\r\n      \"selected\": \"\"\r\n    }\r\n  }\r\n  const initParams = {\r\n    \"rsiBuy\": {\r\n      \"value\": 30,\r\n      \"min\": 1,\r\n      \"max\": 100\r\n    },\r\n    \"rsiSell\": {\r\n      \"value\": 70,\r\n      \"min\": 1,\r\n      \"max\": 100\r\n    },\r\n    \"capitalToSell\": {\r\n      \"value\": 0.99,\r\n      \"min\": 0.001,\r\n      \"max\": 1\r\n    },\r\n    \"minimumGain\": {\r\n      \"value\": 1.01,\r\n      \"min\": 1,\r\n      \"max\": 2\r\n    },\r\n    \"movingAvgFast\": {\r\n      \"value\": 15,\r\n      \"min\": 5,\r\n      \"max\": 100\r\n    },\r\n    \"movingAvgSlow\": {\r\n      \"value\": 240,\r\n      \"min\": 100,\r\n      \"max\": 500\r\n    }\r\n  }\r\n  const [botDropdown, setBotDropdown] = useState(initDropdowns);\r\n  const [botParams, setBotParams] = useState(initParams);\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  // Get trading chart data\r\n  const [submitParams, setSubmitParams] = useState(false); \r\n  const tradingStart = useSelector(state => state.tradingStart);\r\n  const { loadingStart, response} = tradingStart;\r\n\r\n  const tradingBotData = useSelector(state => state.tradingBotData);\r\n  const { loading, chartData, tradingData} = tradingBotData;\r\n\r\n  // const state = useSelector(state => state);\r\n\r\n  const [timestamp, setTimestamp] = useState(Date.now()); \r\n\r\n\r\n  //sleep function to trigger query \r\n  const sleep = (ms) => new Promise(r => setTimeout(r, ms));\r\n\r\n  /*** Send params to backend ***/\r\n  const handleSubmitParams = async () => {\r\n    const N = 1000\r\n    const idParams = 0 \r\n    //set default values\r\n    const asset = botDropdown[\"market\"].selected == '' ?\r\n      \"BTC\"\r\n    : botDropdown[\"market\"].assetValues[botDropdown[\"market\"].values.indexOf(botDropdown[\"market\"].selected)]\r\n    const stable = botDropdown[\"market\"].selected == '' ?\r\n      \"USDT\"\r\n    : botDropdown[\"market\"].stableValues[botDropdown[\"market\"].values.indexOf(botDropdown[\"market\"].selected)]\r\n    const timeframe = botDropdown[\"timeframe\"].selected == '' ?\r\n      \"1m\"\r\n    : botDropdown[\"timeframe\"].selected\r\n    var params = {\r\n      \"asset\": asset,\r\n      \"stable\": stable,\r\n      \"timeframe\": timeframe,\r\n      \"rsiBuy\": botParams[\"rsiBuy\"].value,\r\n      \"rsiSell\": botParams[\"rsiSell\"].value,\r\n      \"percToSell\": botParams[\"capitalToSell\"].value,\r\n      \"marginSell\": botParams[\"minimumGain\"].value,\r\n      \"moveAvgFast\": botParams[\"movingAvgFast\"].value,\r\n      \"moveAvgSlow\": botParams[\"movingAvgSlow\"].value,\r\n      \"timestamp\": timestamp\r\n    }\r\n    console.log(params)\r\n    dispatch(tradingBotStart(params))\r\n    \r\n    for(let i = 0; i < N; i++ ){\r\n      \r\n      await sleep(10000)\r\n\r\n      dispatch(tradingchartData(timestamp))\r\n\r\n      if( chartData.lenght > 1 && !submitParams ){\r\n        setSubmitParams(true)\r\n        idParams = tradingBotData.params._id\r\n        console.log(idParams)\r\n      }\r\n      if (submitParams){    \r\n        dispatch(tradingBot(idParams))\r\n      }    \r\n    }\r\n}\r\n\r\n  // Dropdown \r\n  const inputDropdown = (initLabel) => {\r\n\r\n    var dropdown = botDropdown[initLabel]\r\n    var label = dropdown[\"selected\"] == '' ?\r\n                  dropdown[\"label\"]\r\n                : dropdown[\"label\"] + \": \" + dropdown[\"selected\"] \r\n\r\n    return(      \r\n      <div className=\"d-grid gap-2\">\r\n        <DropdownButton\r\n          as={ButtonGroup}\r\n          id={`dropdown`}\r\n          variant='primary'\r\n          title={label}\r\n        >\r\n          {\r\n           dropdown[\"values\"].map(\r\n              (value, index) => (                \r\n                <Dropdown.Item \r\n                key={index} \r\n                eventKey={index} \r\n                onClick={() => setBotDropdown({\r\n                  ...botDropdown,\r\n                  [initLabel]:{\r\n                    ...dropdown,\r\n                    selected: value\r\n                  }})\r\n                }\r\n              >{value}</Dropdown.Item>                \r\n              )\r\n            )\r\n          }\r\n        </DropdownButton>\r\n      </div>    \r\n    );\r\n  }\r\n  /*** VALIDATION ***/\r\n  // onChange: red text for invalid values\r\n  const handleOnChangeBotParams = (target) => {\r\n    const targetId = target.id\r\n    const targetMax = botParams[targetId].max\r\n    const targetMin = botParams[targetId].min\r\n\r\n    const inputValue = target.value\r\n    var newValue\r\n\r\n    switch (true){\r\n      case inputValue === '':\r\n        newValue = ''\r\n        target.style.color = \"\"\r\n        break;\r\n      case inputValue > targetMax:\r\n        newValue = parseFloat(inputValue)\r\n        target.style.color = \"red\"\r\n        break;\r\n      case inputValue < targetMin:\r\n        newValue = parseFloat(inputValue)\r\n        target.style.color = \"red\"\r\n        break;\r\n      default:\r\n        newValue = parseFloat(inputValue)\r\n        target.style.color = \"\"\r\n        break;      \r\n    }\r\n\r\n    setBotParams({\r\n      ...botParams, \r\n      [targetId]: {\r\n        ...botParams[targetId], \r\n        value: newValue\r\n      }\r\n    })\r\n  }\r\n  // onBlur: black text, min and max for invalid values\r\n  const handleOnBlurBotParams = (target) => {\r\n    const targetId = target.id\r\n    const targetMax = botParams[targetId].max\r\n    const targetMin = botParams[targetId].min\r\n\r\n    const inputValue = target.value\r\n    var newValue\r\n\r\n    switch (true){\r\n      case ( inputValue == '' || inputValue < targetMin ):\r\n        newValue = parseFloat(targetMin)\r\n        break;\r\n      case inputValue > targetMax :\r\n        newValue = parseFloat(targetMax)\r\n        break;\r\n      default:\r\n        newValue = parseFloat(inputValue)  \r\n        break;      \r\n    }\r\n\r\n    setBotParams({\r\n      ...botParams, \r\n      [targetId]: {\r\n        ...botParams[targetId], \r\n        value: newValue\r\n      }\r\n    })  \r\n    target.style.color = \"\"\r\n  }\r\n  /*** SECTIONS ***/ \r\n  // BotParams \r\n  const secBotParams = () => {\r\n    return (\r\n      <Form>\r\n        <h4 className='text-white'>Bot Parameters Setting</h4>\r\n        <Form.Group>\r\n          <Row>\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              {inputDropdown(\"market\")}\r\n            </Col>  \r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              {inputDropdown(\"timeframe\")}\r\n            </Col>  \r\n          </Row>   \r\n\r\n          <Row>                        \r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>RSI buy signal</Form.Label>\r\n              <Form.Control           \r\n                id='rsiBuy'                   \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\" \r\n                value={botParams.rsiBuy.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>RSI sell signal</Form.Label>\r\n              <Form.Control     \r\n                id='rsiSell'           \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\"\r\n                value={botParams.rsiSell.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>Capital to sell</Form.Label>\r\n              <Form.Control\r\n                id='capitalToSell'                              \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\"\r\n                value={botParams.capitalToSell.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>Minimun gain</Form.Label>\r\n              <Form.Control      \r\n                id='minimumGain'             \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\"\r\n                value={botParams.minimumGain.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>Moving Avg fast</Form.Label>\r\n              <Form.Control   \r\n                id='movingAvgFast'                 \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\"\r\n                value={botParams.movingAvgFast.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n            <Col className='p-2' lg={2} md={2} sm={6} xs={6}>\r\n              <Form.Label>Moving Avg slow</Form.Label>\r\n              <Form.Control    \r\n                id='movingAvgSlow'                \r\n                className='rounded'\r\n                as=\"input\" \r\n                type=\"number\"            \r\n                value={botParams.movingAvgSlow.value} \r\n                onChange={e => handleOnChangeBotParams(e.target)}\r\n                onBlur={e => handleOnBlurBotParams(e.target)}\r\n              />\r\n            </Col>\r\n          </Row>       \r\n\r\n          <Row>          \r\n            <Col className='p-2' lg={{span: 6, offset: 3}} md={{span: 6, offset: 3}} sm={12} xs={12}>  \r\n              <div className=\"d-grid gap-2\">\r\n                <Button \r\n                  variant=\"primary\" \r\n                  className=\"float-end rounded\"                                            \r\n                  onClick={handleSubmitParams}\r\n                  >\r\n                  submit params\r\n                </Button>    \r\n              </div> \r\n            </Col>           \r\n          </Row>           \r\n          {/* <Row>          \r\n            <Col className='p-2' lg={{span: 6, offset: 3}} md={{span: 6, offset: 3}} sm={12} xs={12}>  \r\n              <div className=\"d-grid gap-2\">\r\n                <Button \r\n                  variant=\"primary\" \r\n                  className=\"float-end rounded\"                                            \r\n                  onClick={handleLoadChart}\r\n                  >\r\n                  load chart\r\n                </Button>    \r\n              </div> \r\n            </Col>           \r\n          </Row>     */}\r\n\r\n        </Form.Group>            \r\n      </Form>\r\n    );\r\n  }\r\n   // Chart \r\n   const secChartDisplay = () => {\r\n    return (\r\n      submitParams ? \r\n        loading ? <Loader /> \r\n          : <ChartComponent data={chartData}></ChartComponent>          \r\n      : <div></div>\r\n    );\r\n  }\r\n\r\n  return (\r\n     <div>\r\n        <Row className='py-2'>\r\n          {secBotParams()}        \r\n        </Row>\r\n\r\n        <Row className='py-2'>\r\n          {secChartDisplay()}                         \r\n        </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SecTradingSession\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}